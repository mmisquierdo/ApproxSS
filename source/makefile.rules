##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := approxss

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Handle exceptions here (OS/arch related) ######

RUNNABLE_TESTS := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)

###### Handle exceptions here (bugs related) ######

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

# Build the intermediate object file.
$(OBJDIR)fault-injector$(OBJ_SUFFIX): fault-injector.cpp fault-injector.h compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -Wpedantic -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)period-log$(OBJ_SUFFIX): period-log.cpp period-log.h compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -Wpedantic -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)injector-configuration$(OBJ_SUFFIX): injector-configuration.cpp injector-configuration.h compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -Wpedantic -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)consumption-profile$(OBJ_SUFFIX): consumption-profile.cpp consumption-profile.h compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -Wpedantic -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)configuration-input$(OBJ_SUFFIX): configuration-input.cpp configuration-input.h compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -Wpedantic -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the intermediate object file. 
$(OBJDIR)approximate-buffer$(OBJ_SUFFIX): approximate-buffer.cpp approximate-buffer.h compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -Wpedantic -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)approxss$(OBJ_SUFFIX): approxss.cpp compiling-options.h
	$(CXX) $(TOOL_CXXFLAGS) -O3 -flto=1 $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(OBJDIR)approxss$(PINTOOL_SUFFIX): $(OBJDIR)approxss$(OBJ_SUFFIX) $(OBJDIR)injector-configuration$(OBJ_SUFFIX) injector-configuration.h $(OBJDIR)consumption-profile$(OBJ_SUFFIX) consumption-profile.h $(OBJDIR)fault-injector$(OBJ_SUFFIX) fault-injector.h $(OBJDIR)approximate-buffer$(OBJ_SUFFIX) approximate-buffer.h $(OBJDIR)configuration-input$(OBJ_SUFFIX) configuration-input.h $(OBJDIR)period-log$(OBJ_SUFFIX) period-log.h compiling-options.h
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) -Wpedantic -O3 -flto=1 $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)